type Community {
  address: String! @unique
  createdAt: Time!
  name: String!
  membersHash: String!
  snapshotEns: String
  events: [CommunityPoapEvent]! @relation(name: "community_poap_events")
}

type Member {
  address: String! @unique
  createdAt: Time!
  nftAddress: String!
  nftId: String!
  message: String!
  signature: String!
  colorHue: Int!
  colorLightness: Int!
  github: String
  nftSrc: String
  ens: String
}

type CommunityPoapEvent {
  community: Community!
    @relation(name: "community_poap_events")
    @index(name: "community_poap_events_by_community")
  eventId: Int!
  fancyId: String!
  name: String!
  description: String!
  startDate: Date!
  endDate: Date!
  imageUrl: String!
  url: String!
}

type MembersCounter {
  counter: Int!
}

type CommunitiesCounter {
  counter: Int!
}

type Query {
  findCommunityByAddress(address: String!): Community
  findMemberByAddress(address: String!): Member
  getMembersByCreatedAtAsc: [Member!]!
    @resolver(name: "sort_members_by_created_at_asc", paginated: true)
  getMembersByCreatedAtDesc: [Member!]!
    @resolver(name: "sort_members_by_created_at_desc", paginated: true)
  getCommunityPoapEvents(communityId: ID!): [CommunityPoapEvent!]!
    @resolver(name: "get_community_poap_events", paginated: true)

  allCommunities: [Community!]!

  nextMembersCounter: MembersCounter! @resolver(name: "increment_members_counter")
  previousMembersCounter: MembersCounter! @resolver(name: "decrement_members_counter")
  membersCount: MembersCounter!

  nextCommunitiesCounter: CommunitiesCounter! @resolver(name: "increment_communities_counter")
  previousCommunitiesCounter: CommunitiesCounter! @resolver(name: "decrement_communities_counter")
  communitiesCount: CommunitiesCounter!
}

# This allows updates to single fields:
# Side effect: create does not validate required fields, make sure to validate API-side!
# TODO: switch to using partial update mutations (when ready)
# https://docs.fauna.com/fauna/current/api/graphql/previews/partial_update_mutation
input CommunityInput {
  address: String
  createdAt: Time
  name: String
  membersHash: String
  snapshotEns: String
}

# This allows updates to single fields:
# Side effect: create does not validate required fields, make sure to validate API-side!
# TODO: switch to using partial update mutations (when ready)
# https://docs.fauna.com/fauna/current/api/graphql/previews/partial_update_mutation
input MemberInput {
  address: String
  createdAt: Time
  nftAddress: String
  nftId: String
  colorHue: Int
  colorLightness: Int
  github: String
  nftSrc: String
  ens: String
}
