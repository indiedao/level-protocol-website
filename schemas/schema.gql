type CommunityMember {
  username: String!
  address: String!
  ens: String!
  community: [Community!] @relation
}

type Integration {
  cid: String!
  community: Community!
}

type Skillset {
  name: String!
  description: String
  community: Community!
  skills: [Skill!] @relation
}

type Skill {
  name: String!
  description: String
  skillsets: [Skillset!] @relation
}

type RollupConfig {
  systemName: String!
  skill: Skill!
  functionName: String!
  dataSourcesKeys: [String!]
  community: Community!
}

type RollupCache {
  cid: String!
  rollupData: String!
  community: Community!
}

type Community {
  name: String!
  address: String!
  ens: String
  members: [CommunityMember!] @relation
  integrations: [Integration!] @relation
  skillset: [Skillset!] @relation
  rollupConfigs: [RollupConfig!] @relation
}

type MemberConfig {
  address: String!
  ens: String
  nftAddress: String!
  nftId: String!
  message: String!
  signature: String!
}

type Query {
  allCommunities: [Community!]
  community(address: String!): Community
  createCommunity(name: String!, address: String!, ens: String): Community
  allCommunityMembers: [CommunityMember!]
  createCommunityMember(
    username: String!
    address: String!
    ens: String
  ): CommunityMember
  allIntegrations: [Integration!]
  createIntegration(cid: String!): Integration
  allSkills: [Skill!]
  skill(name: String!): Skill
  createSkill(name: String!): Skill
  rollupConfig(functionName: String!): [RollupConfig!]
  createRollupConfig(functionName: String!): RollupConfig
  createRollupCache(cid: String!): RollupCache
  RollupCache(cid: String!): RollupCache
  memberConfig(address: String!): MemberConfig
  createConfig(
    address: String!
    ens: String
    nftAddress: String!
    nftId: String!
    message: String!
    signature: String!
  ): MemberConfig
}
