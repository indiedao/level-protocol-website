type Community {
  address: String! @unique
  createdAt: Time!
  name: String!
  membersHash: String!
  snapshotEns: String
}

type Member {
  address: String! @unique
  createdAt: Time!
  nftAddress: String!
  nftId: String!
  message: String!
  signature: String!
  colorHue: Int!
  colorLightness: Int!
  github: String
  nftSrc: String
  ens: String
}

type MembersCounter {
  counter: Int!
}

type CommunitiesCounter {
  counter: Int!
}

type Query {
  findCommunityByAddress(address: String!): Community
  findMemberByAddress(address: String!): Member
  getMembersByCreatedAtAsc: [Member!]!
    @resolver(name: "sort_members_by_created_at_asc", paginated: true)
  getMembersByCreatedAtDesc: [Member!]!
    @resolver(name: "sort_members_by_created_at_desc", paginated: true)

  allCommunities: [Community!]!

  nextMembersCounter: MembersCounter! @resolver(name: "increment_members_counter")
  previousMembersCounter: MembersCounter! @resolver(name: "decrement_members_counter")
  membersCount: MembersCounter!

  nextCommunitiesCounter: CommunitiesCounter! @resolver(name: "increment_communities_counter")
  previousCommunitiesCounter: CommunitiesCounter! @resolver(name: "decrement_communities_counter")
  communitiesCount: CommunitiesCounter!
}

# This allows updates to single fields:
# Side effect: create does not validate required fields, make sure to validate API-side!
# TODO: switch to using partial update mutations (when ready)
# https://docs.fauna.com/fauna/current/api/graphql/previews/partial_update_mutation
input CommunityInput {
  address: String
  createdAt: Time
  name: String
  membersHash: String
  snapshotEns: String
}

# This allows updates to single fields:
# Side effect: create does not validate required fields, make sure to validate API-side!
# TODO: switch to using partial update mutations (when ready)
# https://docs.fauna.com/fauna/current/api/graphql/previews/partial_update_mutation
input MemberInput {
  address: String
  createdAt: Time
  nftAddress: String
  nftId: String
  colorHue: Int
  colorLightness: Int
  github: String
  nftSrc: String
  ens: String
}

# CreateIndex({
#   name: 'all_members_sorted_by_created_at',
#   source: Collection('Member'),
#   values: [
#     { field: ['data', 'createdAt'] },
#     { field: ['ref'] },
#   ],
# })

# Update(
#   Function('sort_members_by_created_at_asc'),
#   {
#     'body': Query(
#       Lambda(
#         ['size', 'after', 'before'],
#         Let(
#           {
#             'match': Match(Index('all_members_sorted_by_created_at')),
#             'page': If(
#               Equals(Var('before'), null),
#               If(
#                 Equals(Var('after'), null),
#                 Paginate(
#                   Var('match'),
#                   { 'size': Var('size') },
#                 ),
#                 Paginate(
#                   Var('match'),
#                   { 'size': Var('size'), 'after': Var('after') },
#                 )
#               ),
#               Paginate(
#                 Var('match'),
#                 { 'size': Var('size'), 'before': Var('before') },
#               ),
#             ),
#           },
#           Map(
#             Var('page'),
#             Lambda(
#               'values',
#               Get(Select(1, Var('values')))
#             )
#           )
#         )
#       )
#     ),
#   }
# )

# Update(
#   Function('sort_members_by_created_at_desc'),
#   {
#     'body': Query(
#       Lambda(
#         ['size', 'after', 'before'],
#         Let(
#           {
#             'match': Reverse(Match(Index('all_members_sorted_by_created_at'))),
#             'page': If(
#               Equals(Var('before'), null),
#               If(
#                 Equals(Var('after'), null),
#                 Paginate(
#                   Var('match'),
#                   { 'size': Var('size') },
#                 ),
#                 Paginate(
#                   Var('match'),
#                   { 'size': Var('size'), 'after': Var('after') },
#                 )
#               ),
#               Paginate(
#                 Var('match'),
#                 { 'size': Var('size'), 'before': Var('before') },
#               ),
#             ),
#           },
#           Map(
#             Var('page'),
#             Lambda(
#               'values',
#               Get(Select(1, Var('values')))
#             )
#           )
#         )
#       )
#     ),
#   }
# )

# Update(
#   Function("increment_members_counter"), {
#     body: Query(
#       Lambda(
#         [],
#         Let(
#           {
#             counterRef: Ref(Collection("MembersCounter"), "1"),
#             counter: Get(Var("counterRef")),
#             counterValue: Select(["data", "counter"], Var("counter"))
#           },
#           Update(
#             Var("counterRef"),
#             {
#               data: {
#                 counter: Add(Var("counterValue"), 1)
#               }
#             }
#           )
#         )
#       )
#     )
#   })

# Update(
#   Function("decrement_members_counter"), {
#     body: Query(
#       Lambda(
#         [],
#         Let(
#           {
#             counterRef: Ref(Collection("MembersCounter"), "1"),
#             counter: Get(Var("counterRef")),
#             counterValue: Select(["data", "counter"], Var("counter"))
#           },
#           Update(
#             Var("counterRef"),
#             {
#               data: {
#                 counter: Add(Var("counterValue"), -1)
#               }
#             }
#           )
#         )
#       )
#     )
#   })

# Create(
#   Ref(Collection("MembersCounter"), "1"),
#   { data: { counter: 0 } }
# )

# Update(
#   Function("increment_communities_counter"), {
#     body: Query(
#       Lambda(
#         [],
#         Let(
#           {
#             counterRef: Ref(Collection("CommunitiesCounter"), "1"),
#             counter: Get(Var("counterRef")),
#             counterValue: Select(["data", "counter"], Var("counter"))
#           },
#           Update(
#             Var("counterRef"),
#             {
#               data: {
#                 counter: Add(Var("counterValue"), 1)
#               }
#             }
#           )
#         )
#       )
#     )
#   })

# Update(
#   Function("decrement_communities_counter"), {
#     body: Query(
#       Lambda(
#         [],
#         Let(
#           {
#             counterRef: Ref(Collection("CommunitiesCounter"), "1"),
#             counter: Get(Var("counterRef")),
#             counterValue: Select(["data", "counter"], Var("counter"))
#           },
#           Update(
#             Var("counterRef"),
#             {
#               data: {
#                 counter: Add(Var("counterValue"), -1)
#               }
#             }
#           )
#         )
#       )
#     )
#   })

# Create(
#   Ref(Collection("CommunitiesCounter"), "1"),
#   { data: { counter: 0 } }
# )
